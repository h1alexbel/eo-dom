+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+alias org.eolang.dom.dom-parser
+architect yegor256@gmail.com
+home https://github.com/h1alexbel/eo-dom
+tests
+package org.eolang.dom
+version 0.0.0

# This unit test is supposed to check the functionality of the corresponding object.
[] > creates-element
  eq. > @
    dom-parser.parse-from-string
      "<foo/>"
    .create-element "bar"
    .as-string
    """
    <?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <bar/>\n
    """

# This unit test is supposed to check the functionality of the corresponding object.
# @todo #51:45min Make possible to append child node to the empty doc.
#  It should be possible to append newly created element inside empty document.
#  In this case, inserted element will be the root element of document. Don't forget
#  to add EO and Java tests.
[] > appends-element
  dom-parser.parse-from-string > doc
    "<foo/>"
  eq. > @
    doc.append-child
      doc.create-element
        "bar"
      .with-attribute "f" "x"
      .with-text "boom"
    .as-string
    """
    <?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <foo>
       <bar f=\"x\">boom</bar>
    </foo>\n
    """

# This unit test is supposed to check the functionality of the corresponding object.
[] > retrieves-element-at-index
  dom-parser.parse-from-string > doc
    "<books><book title='Object Thinking'/><book title='Elegant Objects Vol 1.'/></books>"
  doc.get-elements-by-tag-name "book" > books
  books.at 0 > first
  eq. > @
    first.as-string
    """
    <?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <book title=\"Object Thinking\"/>\n
    """

# This unit test is supposed to check the functionality of the corresponding object.
[] > retrieves-attribute-from-first-element
  dom-parser.parse-from-string > doc
    "<books><book title='Object Thinking'/><book title='Elegant Objects Vol 1.'/></books>"
  doc.get-elements-by-tag-name "book" > books
  books.at 0 > first
  first.get-attribute "title" > title
  eq. > @
    title
    "Object Thinking"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-element-by-id
  dom-parser.parse-from-string > doc
    "<cities><c id='Moscow'/><c id='San Francisco'/><c id='Shanghai'/></cities>"
  eq. > @
    doc.get-element-by-id
      "Moscow"
    .get-attribute "id"
    "Moscow"

# This unit test is supposed to check the functionality of the corresponding object.
[] > retrieves-elements-in-namespace
  dom-parser.parse-from-string > doc
    "<root xmlns:x=\"https://foo.com/ns\"><x:foo>first</x:foo><x:foo>second</x:foo><x:bar>it is bar</x:bar></root>"
  doc.get-elements-by-tag-name-ns "https://foo.com/ns" "foo" > elements
  eq. > @
    elements.length
    2

# This unit test is supposed to check the functionality of the corresponding object.
[] > retrieves-elements-in-wildcard-namespace
  dom-parser.parse-from-string > doc
    "<root xmlns:x=\"https://foo.com/ns\" xmlns:y=\"https://y.com/ns\"><x:f>first</x:f><x:f>second</x:f><y:f>third</y:f></root>"
  doc.get-elements-by-tag-name-ns "*" "f" > elements
  eq. > @
    elements.length
    3

# This unit test is supposed to check the functionality of the corresponding object.
[] > retrieves-parent-node
  dom-parser.parse-from-string > doc
    "<trip oneway=\"maybe\"><station id='MOW'>Moscow</station><station id='PVG'>Shanghai</station></trip>"
  eq. > @
    doc.get-element-by-id
      "MOW"
    .parent-node
    .get-attribute "oneway"
    "maybe"
