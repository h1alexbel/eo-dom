# The MIT License (MIT)
#
# Copyright (c) 2016-2025 Objectionary.com
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

+alias org.eolang.dom.doc
+alias org.eolang.dom.dom-parser
+architect yegor256@gmail.com
+home https://github.com/h1alexbel/eo-dom
+tests
+package org.eolang.dom
+version 0.0.0
+unlint broken-ref

# This unit test is supposed to check the functionality of the corresponding object.
[] > creates-simple-document
  eq. > @
    (doc "<program/>").as-string
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><program/>"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-element-at-index
  dom-parser.parse-from-string > doc
    "<books><book title=\"Object Thinking\"/><book title=\"Elegant Objects Vol 1.\"/></books>"
  doc.get-elements-by-tag-name "book" > books
  books.at 0 > first
  eq. > @
    first.as-string
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><book title=\"Object Thinking\"/>"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-element-in-document
  eq. > @
    doc
      "<program/>"
    .elem "program"
    .as-string
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><program/>"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-child-element
  eq. > @
    doc
      "<program><test>here</test></program>"
    .elem "test"
    .as-string
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><test>here</test>"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-child-elements-recursively
  eq. > @
    doc
      "<a><b>x</b></a>"
    .elem "a"
    .elem "b"
    .as-string
    "<?xml version=\"1.0\" encoding=\"UTF-8\"?><b>x</b>"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-attribute-in-child-node-in-depth
  eq. > @
    doc
      "<a><b f=\"ttt\">x</b></a>"
    .elem "a"
    .elem "b"
    .attr "f"
    "ttt"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-text-in-child-node-in-depth
  eq. > @
    doc
      "<a><b>x</b></a>"
    .elem "a"
    .elem "b"
    .text
    "x"

# This unit test is supposed to check the functionality of the corresponding object.
[] > finds-attribute-inside-node
  eq. > @
    doc
      "<foo bar=\"ax\"></foo>"
    .attr "bar"
    "ax"

# This unit test is supposed to check the functionality of the corresponding object.
[] > returns-text-inside-node
  eq. > @
    (doc "<foo>bar</foo>").text
    "bar"
