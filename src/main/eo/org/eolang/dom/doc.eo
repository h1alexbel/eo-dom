+alias org.eolang.dom.dom-parser
+spdx SPDX-FileCopyrightText Copyright (c) 2016-2025 Objectionary.com
+spdx SPDX-License-Identifier: MIT
+architect yegor256@gmail.com
+home https://github.com/h1alexbel/eo-dom
+package org.eolang.dom
+rt jvm io.github.h1alexbel:eo-dom:0.0.0
+version 0.0.0
+also string
+unlint rt-without-atoms

# The doc object allows you to create XML tree-based documents. Serves as
# an entry-point into the XML-based document's content.
[] > doc
  # XML.
  [data] > @ ?

  # Serialized XML.
  [serialized] > xml
    [name] > get-elements-by-tag-name ?
    # Retrieves a list of elements with the given tag name belonging to the given namespace.
    # The complete document is searched, including the root node.
    [ns name] > get-elements-by-tag-name-ns ?
    # Returns an element whose id property matches the specified string.
    # Since element IDs are required to be unique if specified, they're a
    # useful way to get access to a specific element quickly.
    [identifier] > get-element-by-id ?
    [] > as-string ?
    # Creates the DOM element specified by `lname`.
    [lname] > create-element ?
    # Appends child to DOM document.
    [child] > append-child ?
    # Evaluate XPath expression.
    # `xpath` - XPath expression.
    # `return` - Return type, possible data types:
    # `string` - Node result with `text()` node inside.
    # `number` - Number result.
    # `boolean` - Boolean result.
    # `node` - Single node result as XML element.
    # `nodeset` - Multiple node results as collection of XML elements.
    [xpath return] > evaluate ?
  eq. +> creates-element
    dom-parser.parse-from-string
      "<foo/>"
    .create-element "bar"
    .as-string
    """
    <?xml version=\"1.0\" encoding=\"UTF-8\"?>
    <bar/>\n
    """

  # Test.
  # @todo #51:45min Make possible to append child node to the empty doc.
  #  It should be possible to append newly created element inside empty document.
  #  In this case, inserted element will be the root element of document. Don't forget
  #  to add EO and Java tests.
  [] +> appends-element
    dom-parser.parse-from-string > doc
      "<foo/>"
    eq. > @
      doc.append-child
        doc.create-element
          "bar"
        .with-attribute "f" "x"
        .with-text "boom"
      .as-string
      """
      <?xml version=\"1.0\" encoding=\"UTF-8\"?>
      <foo>
         <bar f=\"x\">boom</bar>
      </foo>\n
      """

  [] +> retrieves-element-at-index
    dom-parser.parse-from-string > doc
      "<books><book title='Object Thinking'/><book title='Elegant Objects Vol 1.'/></books>"
    doc.get-elements-by-tag-name "book" > books
    books.at 0 > first
    eq. > @
      first.as-string
      """
      <?xml version=\"1.0\" encoding=\"UTF-8\"?>
      <book title=\"Object Thinking\"/>\n
      """

  [] +> retrieves-attribute-from-first-element
    dom-parser.parse-from-string > doc
      "<books><book title='Object Thinking'/><book title='Elegant Objects Vol 1.'/></books>"
    doc.get-elements-by-tag-name "book" > books
    books.at 0 > first
    first.get-attribute "title" > title
    eq. > @
      title
      "Object Thinking"

  [] +> finds-element-by-id
    dom-parser.parse-from-string > doc
      "<cities><c id='Moscow'/><c id='San Francisco'/><c id='Shanghai'/></cities>"
    eq. > @
      doc.get-element-by-id
        "Moscow"
      .get-attribute "id"
      "Moscow"

  [] +> retrieves-elements-in-namespace
    dom-parser.parse-from-string > doc
      "<root xmlns:x=\"https://foo.com/ns\"><x:foo>first</x:foo><x:foo>second</x:foo><x:bar>it is bar</x:bar></root>"
    doc.get-elements-by-tag-name-ns "https://foo.com/ns" "foo" > elements
    eq. > @
      elements.length
      2

  [] +> retrieves-elements-in-wildcard-namespace
    dom-parser.parse-from-string > doc
      "<root xmlns:x=\"https://foo.com/ns\" xmlns:y=\"https://y.com/ns\"><x:f>first</x:f><x:f>second</x:f><y:f>third</y:f></root>"
    doc.get-elements-by-tag-name-ns "*" "f" > elements
    eq. > @
      elements.length
      3

  [] +> retrieves-parent-node
    dom-parser.parse-from-string > doc
      "<trip oneway=\"maybe\"><station id='MOW'>Moscow</station><station id='PVG'>Shanghai</station></trip>"
    eq. > @
      doc.get-element-by-id
        "MOW"
      .parent-node
      .get-attribute "oneway"
      "maybe"

  [] +> evaluates-xpath-as-string
    dom-parser.parse-from-string > doc
      "<objects><o name='f' base='Q.org.eolang.string'/><o base='Q.org.eolang.f'/></objects>"
    eq. > @
      doc.evaluate "//o[1]/@name" "string"
      "f"

  [] +> evaluates-xpath-as-number
    dom-parser.parse-from-string > doc
      "<objects><o name='f' base='Q.org.eolang.string'/><o line='222' base='Q.org.eolang.f'/></objects>"
    eq. > @
      doc.evaluate "//o[2]/@line" "number"
      222

  [] +> evaluates-xpath-as-bool
    dom-parser.parse-from-string > doc
      "<objects><o name='f' base='Q.org.eolang.string'/><o base='Q.org.eolang.f'/></objects>"
    eq. > @
      doc.evaluate "//o[2][starts-with(@base, 'Q.org.eolang')]" "boolean"
      true

  [] +> evaluates-xpath-as-node
    dom-parser.parse-from-string > doc
      "<objects><o name='a' base='Q.org.eolang.f'/><o name='b' base='Q.org.eolang.f'/><o name='c' base='Q.org.eolang.string'/></objects>"
    eq. > @
      doc.evaluate
        "//o[@name='c']"
        "node"
      .get-attribute "base"
      "Q.org.eolang.string"

  [] +> evaluates-xpath-as-nodeset
    dom-parser.parse-from-string > doc
      "<objects><o name='a' base='Q.org.eolang.f'/><o name='b' base='Q.org.eolang.f'/><o name='c' base='Q.org.eolang.string'/></objects>"
    eq. > @
      doc.evaluate
        "//o[@base='Q.org.eolang.f']"
        "nodeset"
      .length
      2
